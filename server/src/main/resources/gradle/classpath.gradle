// Copyright 2024 Dmitrii Tseiler. Licensed under the PolyForm Perimeter License 1.0.0 (https://polyformproject.org/licenses/perimeter/1.0.0)

gradle.projectsEvaluated {
    def otherKotlinPluginsFound = false
    def kotlinJVMPluginFound = false
    allprojects { prj ->
        kotlinJVMPluginFound = kotlinJVMPluginFound || prj.getPlugins().findPlugin("org.jetbrains.kotlin.jvm")
        otherKotlinPluginsFound = otherKotlinPluginsFound ||
                prj.getPlugins().findPlugin("org.jetbrains.kotlin.multiplatform") ||
                prj.getPlugins().findPlugin("org.jetbrains.kotlin.common") ||
                prj.getPlugins().findPlugin("org.jetbrains.kotlin.js")
    }
    if (!kotlinJVMPluginFound) {
        println("unblockt:no-kotlin-jvm-plugin")
        return
    }
    if (otherKotlinPluginsFound) {
        println("unblockt:non-jvm-plugins")
        return
    }

    println("unblockt:java:home:" + System.getProperty('java.home'))
    allprojects { prj ->
        println("unblockt:project:${prj.name}")
        println("unblockt:project-directory:${prj.path}")
        println("unblockt:project-build-file:${prj.getBuildFile().toString()}")
        def compileClasspath = prj.configurations.findByName("compileClasspath")
        if (compileClasspath != null) {
            compileClasspath.incoming.dependencies.forEach { d ->
                println("unblockt:dependency:name:${d.name}")
                println("unblockt:dependency:type:${if (d.properties["dependencyProject"] != null) "module" else "artifact"}")
            }
            compileClasspath.resolvedConfiguration.getResolvedArtifacts().forEach { art ->
                println("unblockt:dependency:artifact:name:${art.name}")
                println("unblockt:dependency:artifact:path:${art.file.absolutePath}")
            }
        }
        println("unblockt:test-classpath")
        def testClasspath = prj.configurations.findByName("testCompileClasspath")
        if (testClasspath != null) {
            testClasspath.incoming.dependencies.forEach { d ->
                println("unblockt:dependency:name:${d.name}")
                println("unblockt:dependency:type:${if (d.properties["dependencyProject"] != null) "module" else "artifact"}")
            }
            testClasspath.resolvedConfiguration.getResolvedArtifacts().forEach { art ->
                println("unblockt:dependency:artifact:name:${art.name}")
                println("unblockt:dependency:artifact:path:${art.file.absolutePath}")
            }
        }
    }
}
